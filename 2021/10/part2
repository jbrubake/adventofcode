#!/usr/bin/awk -f

function score_missing(s,    score, i, c) {
    score = 0

    for (i = 1; i <= length(s); i++) {
        c = substr(s, i, 1)
        score *= 5
             if (c == ")") score += 1
        else if (c == "]") score += 2
        else if (c == "}") score += 3
        else if (c == ">") score += 4
    }

    return score
}

function is_left(c) {
    return match(c, /[({[<]/)
}

function is_match(c1, c2) {
    if (c1 == "(" && c2 == ")") return 1
    if (c1 == "{" && c2 == "}") return 1
    if (c1 == "[" && c2 == "]") return 1
    if (c1 == "<" && c2 == ">") return 1
    return 0
}

BEGIN {
    n = 0
}

{ 
    sp = 0
    for (i = 1; i <= length($0); i++) {
        c = substr($0, i, 1)
        # Push left brackets
        if (is_left(c)) {
            stack[++sp] = c
        # Pop left bracket if we grabbed a matching close bracket
        } else if (is_match(stack[sp], c)) {
            delete stack[sp--]
        # Add syntax errors to the corrupt list and get next line
        } else if (!is_match(stack[sp], c)) {
            corrupt = corrupt c
            next
        } else print "WTF?!"
    }

    # Score missing closers
    missing = ""
    for (i in stack) {
             if (stack[i] == "(") c = ")"
        else if (stack[i] == "{") c = "}"
        else if (stack[i] == "[") c = "]"
        else if (stack[i] == "<") c = ">"
        missing = c missing
    }

    missing_scores[++n] = score_missing(missing)
}

END {
    for (i = 1; i <= length(corrupt); i++) {
        c = substr(corrupt, i, 1)
             if (c == ")") corrupt_score += 3
        else if (c == "}") corrupt_score += 1197
        else if (c == "]") corrupt_score += 57
        else if (c == ">") corrupt_score += 25137
    }

    n = asort(missing_scores, missing_scores)

    printf("Part 1 score: %s\n", corrupt_score)
    printf("Part 2 score: %s\n", missing_scores[int(n/2) + 1])
}
